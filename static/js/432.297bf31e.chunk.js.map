{"version":3,"file":"static/js/432.297bf31e.chunk.js","mappings":"+OAyBe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAOMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACH,OAAOC,EAAQO,GACjB,IAAK,QACH,OAAOL,EAASK,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,SAYN,OACE,4BACE,iJAEA,kBAAMC,SAZW,SAAAC,GACnBA,EAAIC,iBACJd,EAASe,EAAAA,GAAwB,CAAEZ,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAChDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAOoBQ,aAAa,MAA3C,WACE,qCAEE,kBAAOC,KAAK,OAAOd,KAAK,OAAOQ,MAAOR,EAAMe,SAAUT,QAExD,sCAEE,kBACEQ,KAAK,QACLd,KAAK,QACLQ,MAAON,EACPa,SAAUT,QAGd,yCAEE,kBACEQ,KAAK,WACLd,KAAK,WACLQ,MAAOJ,EACPW,SAAUT,QAGd,mBAAQQ,KAAK,SAAb","sources":["pages/RegisterPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport * as authOperations from 'redux/Auth/authOperations';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\nimport { useState } from 'react';\n// import {\n//   InputForm,\n//   LabelName,\n//   SubmitButton,\n//   PhonebookForm,\n//   ErrorText,\n// } from 'components/ContactForm/ContactForm.styled';\n\n// const initialState = {\n//   name: '',\n//   email: '',\n//   password: '',\n// };\n\n// const schema = yup.object().shape({\n//   name: yup.string().required(),\n//   email: yup.string().required(),\n//   password: yup.string().required(),\n// });\n\nexport default function RegisterPage() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  //   const handleSubmit = (values, { resetForm }) => {\n  //     dispatch(authOperations.register(values));\n  //     //  contact(values);\n  //     resetForm();\n  //    };\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <h1>Страница регистрации</h1>\n\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          Name\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n        </label>\n        <label>\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">Register</button>\n      </form>\n      {/* <Formik\n        initialValues={initialState}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <form autoComplete=\"off\">\n          <label htmlFor=\"name\">Name</label>\n          <input type=\"text\" name=\"name\" required />\n          <label htmlFor=\"email\">Email</label>\n          <input type=\"email\" name=\"email\" required />\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" name=\"password\" required />\n          <button type=\"submit\">Register</button>\n        </form>\n      </Formik> */}\n    </div>\n  );\n}\n"],"names":["RegisterPage","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","onSubmit","evt","preventDefault","authOperations","autoComplete","type","onChange"],"sourceRoot":""}