{"version":3,"file":"static/js/787.3cec3b71.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\n\nexport const ContactItem = ({ name, number, onDelete }) => {\n  return (\n    <ListItem\n      secondaryAction={\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={onDelete}>\n          <DeleteIcon />\n        </IconButton>\n      }\n    >\n      <ListItemAvatar>\n        <ContactPhoneIcon />\n      </ListItemAvatar>\n      <ListItemText primary={name} />\n      <ListItemText primary={number} />\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/Contacts/contactsSelectors';\nimport * as contactsReducer from 'redux/Contacts/contactsReducer';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(contactsReducer.onChangeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <Box\n      sx={{\n        width: 340,\n        margin: '0 auto',\n        backgroundColor: '#c7f0f8',\n      }}\n    >\n      <TextField\n        fullWidth\n        id=\"name\"\n        name=\"name\"\n        label=\"Find contacts by name\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </Box>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/Contacts/contactsSelectors';\nimport * as contactsOperations from 'redux/Contacts/contactsOperations';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { Filter } from 'components/Filter/Filter';\nimport { LoaderContact } from 'components/Loader/Loader';\nimport Alert from '@mui/material/Alert';\nimport Box from '@mui/material/Box';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const items = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const filteredContacts = () => {\n    const filterNormalized = filter.toLowerCase();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalized)\n    );\n  };\n\n  const deleteItem = async id => {\n    await dispatch(contactsOperations.deleteContact(id));\n    dispatch(contactsOperations.fetchContacts());\n  };\n\n  const contactsList = filteredContacts();\n\n  return (\n    <Box\n      sx={{\n        width: 340,\n        display: 'block',\n        margin: '0 auto',\n      }}\n    >\n      {items.length !== 0 ? (\n        <>\n          <Filter />\n          <ul>\n            {contactsList.map(({ id, name, number }) => (\n              <ContactItem\n                key={id}\n                name={name}\n                number={number}\n                onDelete={() => deleteItem(id)}\n              />\n            ))}\n          </ul>\n          <LoaderContact />\n        </>\n      ) : (\n        <Alert severity=\"info\">There is no contact!</Alert>\n      )}\n    </Box>\n  );\n};\n","import { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useAddContacts } from 'redux/Contacts/contactsReducer';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nconst schema = yup.object().shape({\n  name: yup.string('Enter your name').required('Name is required'),\n  number: yup\n    .string('Enter your number')\n    .min(7, 'Number should be of minimum 7 numbers length')\n    .required('Number is required'),\n});\n\nexport const ContactForm = () => {\n  const { contact } = useAddContacts();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: schema,\n    onSubmit: (values, { resetForm }) => {\n      contact(values);\n      resetForm();\n    },\n  });\n\n  return (\n    <Box\n      sx={{\n        width: 340,\n        margin: '0 auto',\n      }}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          sx={{\n            mb: '10px',\n            backgroundColor: '#c7f0f8',\n          }}\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n\n        <TextField\n          sx={{\n            mb: '10px',\n            backgroundColor: '#c7f0f8',\n          }}\n          fullWidth\n          id=\"number\"\n          name=\"number\"\n          label=\"Number\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n          type=\"tel\"\n        />\n\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Add contact\n        </Button>\n      </form>\n    </Box>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport * as contactsOperations from 'redux/Contacts/contactsOperations';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport Box from '@mui/material/Box';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n  return (\n    <Box\n      sx={{\n        minWidth: '100%',\n        height: '100vh',\n        margin: '0 auto',\n        paddingTop: 2,\n        backgroundColor: '#f4ff77',\n      }}\n    >\n      <ContactForm />\n      <Box\n        component=\"h2\"\n        sx={{\n          fontSize: '24px',\n          fontWeight: 700,\n          lineHeight: 1.4,\n          mt: '25px',\n          mb: '20px',\n          textAlign: 'center',\n        }}\n      >\n        Contacts\n      </Box>\n      <ContactList />\n    </Box>\n  );\n}\n"],"names":["ContactItem","name","number","onDelete","ListItem","secondaryAction","IconButton","edge","onClick","Delete","ListItemAvatar","ContactPhone","ListItemText","primary","Filter","filter","useSelector","getFilter","dispatch","useDispatch","Box","sx","width","margin","backgroundColor","TextField","fullWidth","id","label","value","onChange","evt","contactsReducer","currentTarget","ContactList","items","getContacts","deleteItem","contactsOperations","contactsList","filterNormalized","toLowerCase","contact","includes","filteredContacts","display","length","map","Loader","Alert","severity","schema","yup","shape","required","min","ContactForm","useAddContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","handleSubmit","mb","handleChange","error","touched","Boolean","errors","helperText","type","Button","color","variant","ContactsPage","useEffect","minWidth","height","paddingTop","component","fontSize","fontWeight","lineHeight","mt","textAlign"],"sourceRoot":""}