{"version":3,"file":"static/js/547.31dce761.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Section.styled.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Contact = styled.li`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 1.18;\n  text-transform: capitalize;\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const ContactNumber = styled.span`\n  margin-left: 5px;\n`;\n\nexport const ContactDeleteButton = styled.button`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.18;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  background-color: #f5f4fa;\n  border: 1px solid #d3d2d7;\n  border-radius: 6px;\n  cursor: pointer;\n  padding: 3px 8px;\n  margin-left: 15px;\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n  &:hover,\n  &:focus {\n    border: transparent;\n    color: #ffffff;\n    background-color: #2196f3;\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n      0px 2px 2px rgba(0, 0, 0, 0.12);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Contact,\n  ContactDeleteButton,\n  ContactNumber,\n} from 'components/ContactItem/ContactItem.styled';\n\nexport const ContactItem = ({ name, number, onDelete }) => {\n  return (\n    <Contact>\n      {name}:<ContactNumber>{number}</ContactNumber>\n      <ContactDeleteButton type=\"button\" onClick={onDelete}>\n        Delete\n      </ContactDeleteButton>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactBook = styled.ul`\n  margin-left: 40px;\n`;\n\nexport const NoContactMsg = styled.div`\n  color: #ff0000;\n`;\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div``;\n\nexport const FilterLabel = styled.label`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.18;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  padding: 3px;\n  margin-top: 6px;\n  margin-bottom: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.18;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contactsReducer';\nimport * as contactsReducer from 'redux/contactsReducer';\nimport {\n  FilterContainer,\n  FilterLabel,\n  FilterInput,\n} from 'components/Filter/Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(contactsReducer.onChangeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n          placeholder=\"Enter search name\"\n        ></FilterInput>\n      </FilterLabel>\n    </FilterContainer>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contactsReducer';\nimport * as contactsOperations from 'redux/contactsOperations';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport {\n  ContactBook,\n  NoContactMsg,\n} from 'components/ContactList/ContactList.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { LoaderContact } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const items = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const filteredContacts = () => {\n    const filterNormalized = filter.toLowerCase();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalized)\n    );\n  };\n\n  const deleteItem = async id => {\n    await dispatch(contactsOperations.deleteContact(id));\n    dispatch(contactsOperations.fetchContacts());\n  };\n\n  const contactsList = filteredContacts();\n\n  return (\n    <>\n      {items.length !== 0 ? (\n        <>\n          <Filter />\n          <ContactBook>\n            {contactsList.map(({ id, name, number }) => (\n              <ContactItem\n                key={id}\n                name={name}\n                number={number}\n                onDelete={() => deleteItem(id)}\n              />\n            ))}\n          </ContactBook>\n          <LoaderContact />\n        </>\n      ) : (\n        <NoContactMsg>There is no contact!</NoContactMsg>\n      )}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const PhonebookForm = styled(Form)`\n  border: 1px solid #2a2a2a;\n  width: 340px;\n  padding: 10px;\n`;\n\nexport const LabelName = styled.label`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 1.18;\n  display: block;\n  margin-bottom: 4px;\n`;\n\nexport const InputForm = styled(Field)`\n  display: block;\n  padding: 3px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.18;\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ErrorText = styled(ErrorMessage)`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.18;\n  letter-spacing: 0.03em;\n  color: #ff0000;\n  margin-top: 5px;\n  margin-bottom: 20px;\n`;\n\nexport const SubmitButton = styled.button`\n  font-family: 'Roboto', sans-serif;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.18;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  background-color: #f5f4fa;\n  border: 1px solid #d3d2d7;\n  border-radius: 6px;\n  cursor: pointer;\n  padding: 3px 8px;\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n  &:hover,\n  &:focus {\n    border: transparent;\n    color: #ffffff;\n    background-color: #2196f3;\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n      0px 2px 2px rgba(0, 0, 0, 0.12);\n  }\n`;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useAddContacts } from 'redux/contactsReducer';\nimport {\n  InputForm,\n  LabelName,\n  SubmitButton,\n  PhonebookForm,\n  ErrorText,\n} from 'components/ContactForm/ContactForm.styled';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nexport const ContactForm = () => {\n  const { contact } = useAddContacts();\n\n  const handleSubmit = (values, { resetForm }) => {\n    contact(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialState}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <PhonebookForm autoComplete=\"off\">\n        <LabelName htmlFor=\"name\">Name</LabelName>\n        <InputForm\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Enter your name\"\n          required\n        />\n        <ErrorText name=\"name\" component=\"div\" />\n        <LabelName htmlFor=\"number\">Number</LabelName>\n        <InputForm\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"(000)123-45-67\"\n          required\n        />\n        <ErrorText name=\"number\" component=\"div\" />\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </PhonebookForm>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n  padding: 15px;\n  width: 360px;\n`;\n\nexport const ContactTitle = styled.h2`\n  font-family: 'Roboto', sans-serif;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.4;\n  margin-top: 25px;\n  margin-bottom: 20px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport * as contactsOperations from 'redux/contactsOperations';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { SectionContainer, ContactTitle } from 'components/Section.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n  return (\n    <SectionContainer>\n      <ContactForm />\n      <ContactTitle>Contacts</ContactTitle>\n      <ContactList />\n    </SectionContainer>\n  );\n}\n"],"names":["Contact","styled","ContactNumber","ContactDeleteButton","ContactItem","name","number","onDelete","type","onClick","ContactBook","NoContactMsg","FilterContainer","FilterLabel","FilterInput","Filter","filter","useSelector","getFilter","dispatch","useDispatch","value","onChange","evt","contactsReducer","currentTarget","placeholder","ContactList","items","getContacts","deleteItem","id","contactsOperations","contactsList","filterNormalized","toLowerCase","contact","includes","filteredContacts","length","map","Loader","PhonebookForm","Form","LabelName","InputForm","Field","ErrorText","ErrorMessage","SubmitButton","initialState","schema","yup","shape","required","ContactForm","useAddContacts","initialValues","validationSchema","onSubmit","values","resetForm","autoComplete","htmlFor","pattern","title","component","SectionContainer","ContactTitle","ContactsPage","useEffect"],"sourceRoot":""}